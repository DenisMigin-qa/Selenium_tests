{"name": "test_product_view_sku", "status": "skipped", "statusDetails": {"message": "XFAIL Wait for fix bug\n\nselenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"[class='tab-featuredsas ']\"}\n  (Session info: chrome=110.0.5481.180)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x00B737D3]\n\t(No symbol) [0x00B08B81]\n\t(No symbol) [0x00A0B36D]\n\t(No symbol) [0x00A3D382]\n\t(No symbol) [0x00A3D4BB]\n\t(No symbol) [0x00A73302]\n\t(No symbol) [0x00A5B464]\n\t(No symbol) [0x00A71215]\n\t(No symbol) [0x00A5B216]\n\t(No symbol) [0x00A30D97]\n\t(No symbol) [0x00A3253D]\n\tGetHandleVerifier [0x00DEABF2+2510930]\n\tGetHandleVerifier [0x00E18EC1+2700065]\n\tGetHandleVerifier [0x00E1C86C+2714828]\n\tGetHandleVerifier [0x00C23480+645344]\n\t(No symbol) [0x00B10FD2]\n\t(No symbol) [0x00B16C68]\n\t(No symbol) [0x00B16D4B]\n\t(No symbol) [0x00B20D6B]\n\tBaseThreadInitThunk [0x75E47D69+25]\n\tRtlInitializeExceptionChain [0x7788B74B+107]\n\tRtlClearBits [0x7788B6CF+191]", "trace": "@pytest.mark.xfail(reason=\"Wait for fix bug\")\n    def test_product_view_sku():\n        \"\"\"\n        Test case WERT-1\n        \"\"\"\n    \t\t# Описываем опции запуска браузера\n        chrome_options = Options()\n        chrome_options.add_argument(\"start-maximized\") # открываем на полный экран\n        chrome_options.add_argument(\"--disable-infobars\") # отключаем инфо сообщения\n        chrome_options.add_argument(\"--disable-extensions\") # отключаем расширения\n        # chrome_options.add_argument(\"--headless\") # спец. режим \"без браузера\"\n    \n    \t\t# устанавливаем webdriver в соответствии с версией используемого браузера\n        service = Service(ChromeDriverManager().install())\n        # запускаем браузер с указанными выше настройками\n        driver = webdriver.Chrome(service=service, options=chrome_options)\n    \t\t# определяем адрес страницы для теста и переходим на неё\n        url = \"https://test.qa.studio\"\n        driver.get(url=url)\n    \t\t# ищем по селектору элемент меню \"Горячие товары\" и кликаем по нему\n>       element = driver.find_element(by=By.CSS_SELECTOR, value=\"[class='tab-featuredsas ']\")\n\ntests\\test_smoke.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:830: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000201D0D6DC90>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...dInitThunk [0x75E47D69+25]\\\\n\\\\tRtlInitializeExceptionChain [0x7788B74B+107]\\\\n\\\\tRtlClearBits [0x7788B6CF+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"[class='tab-featuredsas ']\"}\nE         (Session info: chrome=110.0.5481.180)\nE       Stacktrace:\nE       Backtrace:\nE       \t(No symbol) [0x00B737D3]\nE       \t(No symbol) [0x00B08B81]\nE       \t(No symbol) [0x00A0B36D]\nE       \t(No symbol) [0x00A3D382]\nE       \t(No symbol) [0x00A3D4BB]\nE       \t(No symbol) [0x00A73302]\nE       \t(No symbol) [0x00A5B464]\nE       \t(No symbol) [0x00A71215]\nE       \t(No symbol) [0x00A5B216]\nE       \t(No symbol) [0x00A30D97]\nE       \t(No symbol) [0x00A3253D]\nE       \tGetHandleVerifier [0x00DEABF2+2510930]\nE       \tGetHandleVerifier [0x00E18EC1+2700065]\nE       \tGetHandleVerifier [0x00E1C86C+2714828]\nE       \tGetHandleVerifier [0x00C23480+645344]\nE       \t(No symbol) [0x00B10FD2]\nE       \t(No symbol) [0x00B16C68]\nE       \t(No symbol) [0x00B16D4B]\nE       \t(No symbol) [0x00B20D6B]\nE       \tBaseThreadInitThunk [0x75E47D69+25]\nE       \tRtlInitializeExceptionChain [0x7788B74B+107]\nE       \tRtlClearBits [0x7788B6CF+191]\n\nenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: NoSuchElementException"}, "description": "\n    Test case WERT-1\n    ", "start": 1678718134556, "stop": 1678718138552, "uuid": "48da8261-e6e8-4a44-8a28-567603d78114", "historyId": "8c25a645e5147088196780d23973e669", "testCaseId": "b182a51fe23b38aee766531a5bd60411", "fullName": "tests.test_smoke#test_product_view_sku", "labels": [{"name": "tag", "value": "@pytest.mark.xfail(reason='Wait for fix bug')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_smoke"}, {"name": "host", "value": "QAPC"}, {"name": "thread", "value": "12664-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_smoke"}]}